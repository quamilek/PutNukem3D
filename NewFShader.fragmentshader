#version 330 core
in vec2 UV;
in vec3 Normal_eyespace;
in vec3 Eye_Direction;
in vec3 LightDirection_eyespace;
in vec3 interpolatedColor;
in vec4 world_position;


uniform vec4 LightLocation_world_space;
uniform sampler2D textureMap0;


// Ouput data
out vec3 color;



void main()
{
    vec4 texColor0=texture(textureMap0,UV);
    vec3 LightColor = vec3(0.6,0.6,0.6);
	float LightPower = 50.0f;

    vec3 MaterialDiffuseColor = interpolatedColor;
	vec3 MaterialAmbientColor = vec3(0,0,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = texColor0.rgb;

	float distance = length( LightLocation_world_space - world_position );

	vec3 n = normalize( Normal_eyespace );
	vec3 l = normalize( LightDirection_eyespace );

	float cosTheta = clamp( dot( n,l ), 0,1 );




	vec3 E = normalize(Eye_Direction);

    vec3 R = normalize(reflect(-l,n));
    float cosAlpha = clamp( dot( E,R ), 0,1 );

    if(cosAlpha>=clamp(texColor0.g,0.95,1))
    {
        cosAlpha=1.0;
    }



    color = (MaterialAmbientColor +
            MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
			MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance))*texColor0.rgb;




}
